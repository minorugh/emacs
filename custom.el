(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(YaTeX-default-pop-window-height 15 t)
 '(YaTeX-kanji-code nil t)
 '(YaTeX-latex-message-code 'utf-8 t)
 '(all-the-icons-scale-factor 0.9)
 '(amx-history-length 20 t)
 '(amx-save-file "~/.emacs.d/tmp/amx-items" t)
 '(auto-save-buffers-enhanced-exclude-regexps '("^/ssh:" "^/scp:" "/sudo:") t)
 '(auto-save-buffers-enhanced-file-related-with-scratch-buffer "~/.emacs.d/tmp/scratch" t)
 '(auto-save-buffers-enhanced-include-only-checkout-path nil t)
 '(auto-save-buffers-enhanced-quiet-save-p t t)
 '(auto-save-buffers-enhanced-save-scratch-buffer-to-file-p t t)
 '(auto-save-default nil)
 '(auto-save-list-file-prefix nil)
 '(bidi-display-reordering nil t)
 '(bookmark-default-file "~/.emacs.d/tmp/bookmarks")
 '(bookmark-file "~/.emacs.d/tmp/bookmarks")
 '(browse-at-remote-prefer-symbolic nil t)
 '(company-dabbrev-downcase nil)
 '(company-idle-delay 0)
 '(company-minimum-prefix-length 2)
 '(company-require-match 'never)
 '(company-selection-wrap-around t)
 '(company-transformers '(company-sort-by-backend-importance))
 '(completion-ignore-case t t)
 '(completion-ignored-extensions nil)
 '(counsel-find-file-ignore-regexp nil)
 '(counsel-tramp-custom-connections '(/scp:xsrv:/home/minorugh/gospel-haiku\.com/public_html/) t)
 '(create-lockfiles nil)
 '(default-input-method "japanese-mozc")
 '(delete-by-moving-to-trash t)
 '(dired-dwim-target t)
 '(dired-listing-switches "-lgGhF")
 '(dired-omit-files ".elc")
 '(dired-recursive-copies 'always)
 '(dired-recursive-deletes 'always)
 '(doom-modeline-icon t)
 '(doom-modeline-major-mode-icon nil)
 '(doom-modeline-minor-modes nil)
 '(doom-themes-enable-bold nil)
 '(doom-themes-enable-italic nil)
 '(dviprint-command-format "dvpd.sh %s" t)
 '(enable-recursive-minibuffers t)
 '(eshell-ask-to-save-history 'always t)
 '(eshell-cmpl-cycle-completions t t)
 '(eshell-cmpl-cycle-cutoff-length 5 t)
 '(eshell-cmpl-ignore-case t t)
 '(eshell-directory-name "~/.emacs.d/tmp/eshell" t)
 '(eshell-hist-ignoredups t t)
 '(eshell-history-file-name "~/Dropbox/backup/zsh/.zsh_history" t)
 '(eshell-prompt-function 'my:eshell-prompt t)
 '(eshell-prompt-regexp "^[^#$]*[$#] " t)
 '(exec-path-from-shell-check-startup-files nil t)
 '(howm-normalizer 'howm-sort-items-by-reverse-date)
 '(howm-user-font-lock-keywords
   '(("memo:" 0 'compilation-error)
	 ("note:" 0 'compilation-info)
	 ("tech" 0 'font-lock-constant-face)))
 '(howm-view-split-horizontally t)
 '(howm-view-summary-persistent nil)
 '(imenu-list-focus-after-activation t t)
 '(imenu-list-position 'left t)
 '(imenu-list-size 30 t)
 '(init-loader-show-log-after-init 'error-only)
 '(ivy-format-functions-alist '((t . my:ivy-format-function-arrow)))
 '(ivy-use-selectable-prompt t)
 '(ivy-use-virtual-buffers t)
 '(key-chord-safety-interval-backward 0.1 t)
 '(key-chord-safety-interval-forward 0.25 t)
 '(key-chord-two-keys-delay 0.15)
 '(ls-lisp-dirs-first t)
 '(ls-lisp-use-insert-directory-program nil)
 '(make-backup-files nil)
 '(markdown-asymmetric-header t t)
 '(markdown-fontify-code-blocks-natively t t)
 '(markdown-italic-underscore t t)
 '(markdown-toc-user-toc-structure-manipulation-fn 'cdr)
 '(migemo-command "cmigemo")
 '(migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")
 '(mouse-drag-copy-region t)
 '(mozc-candidate-style 'posframe)
 '(mozc-helper-program-name "mozc_emacs_helper" t)
 '(mozc-leim-title "„ÅÇ")
 '(neo-create-file-auto-open t t)
 '(neo-keymap-style 'concise t)
 '(next-line-add-newlines nil)
 '(open-junk-file-find-file-function 'find-file)
 '(open-junk-file-format "~/Dropbox/howm/junk/%Y%m%d." t)
 '(org-agenda-files '("~/Dropbox/org/task.org"))
 '(org-agenda-span 30)
 '(org-hide-leading-stars t)
 '(org-indent-indentation-per-level 4)
 '(org-indent-mode-turns-on-hiding-stars nil)
 '(org-log-done 'org)
 '(org-src-fontify-natively t)
 '(org-startup-folded 'content)
 '(org-startup-indented t)
 '(package-archives
   '(("org" . "https://orgmode.org/elpa/")
	 ("melpa" . "https://melpa.org/packages/")
	 ("gnu" . "https://elpa.gnu.org/packages/")))
 '(package-selected-packages
   '(japanese-holidays yasnippet-snippets company-prescient ivy-prescient posframe selected darkroom google-translate easy-hugo request popup yatex open-junk-file howm viewer markdown-mode neotree package-utils pangu-spacing mozc-cand-posframe mozc rainbow-delimiters smartparens whitespace volatile-highlights dimmer undo-fu web-mode restart-emacs quickrun expand-region iedit popwin which-key prescient auto-save-buffers-enhanced key-chord aggressive-indent all-the-icons-ibuffer all-the-icons-ivy-rich all-the-icons nyan-mode doom-modeline doom-themes yasnippet company counsel-tramp counsel-css migemo amx ivy-rich fontawesome counsel browse-at-remote git-timemachine diff-hl magit page-break-lines dashboard exec-path-from-shell init-loader el-get hydra leaf-keywords))
 '(prescient-aggressive-file-save t)
 '(prescient-save-file "~/.emacs.d/tmp/prescient-save")
 '(read-file-name-completion-ignore-case t)
 '(recentf-auto-cleanup 'never)
 '(recentf-exclude
   '("\\.howm-keys" "Dropbox/backup" ".emacs.d/tmp/" ".emacs.d/elpa/" "/scp:"))
 '(recentf-save-file "~/.emacs.d/tmp/recentf")
 '(regexp-opt nil t)
 '(request-storage-directory "~/.emacs.d/tmp/request" t)
 '(require-final-newline t)
 '(ring-bell-function 'ignore)
 '(save-place-file "~/.emacs.d/tmp/places")
 '(savehist-additional-variables '(kill-ring))
 '(savehist-file "~/.emacs.d/tmp/history")
 '(scroll-preserve-screen-position t)
 '(search-default-mode nil)
 '(select-enable-clipboard t)
 '(show-paren-style 'parenthesis)
 '(show-paren-when-point-in-periphery t)
 '(show-paren-when-point-inside-paren t)
 '(show-trailing-whitespace nil)
 '(tab-width 4)
 '(tex-command "platex" t)
 '(timep-use-speed-commands t t)
 '(tramp-default-method "scp")
 '(tramp-persistency-file-name "~/.emacs.d/tmp/tramp")
 '(transient-history-file "~/.emacs.d/tmp/transient-history" t)
 '(uniquify-buffer-name-style 'post-forward-angle-brackets nil (uniquify))
 '(url-configuration-directory "~/.emacs.d/tmp/url")
 '(vc-follow-symlinks t)
 '(viewer-modeline-color-unwritable "#2F6828")
 '(viewer-modeline-color-view "#852941")
 '(visible-bell nil)
 '(web-mode-code-indent-offset 2 t)
 '(web-mode-css-indent-offset 2 t)
 '(web-mode-markup-indent-offset 2 t)
 '(which-key-max-description-length 40))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background "#282a36"))))
 '(lsp-face-highlight-read ((t (:background "gray21" :underline t))))
 '(lsp-face-highlight-write ((t (:background "gray21" :underline t))))
 '(markdown-code-face ((t (:inherit nil))))
 '(markdown-pre-face ((t (:inherit font-lock-constant-face))))
 '(markup-meta-face ((t (:stipple nil :foreground "gray30" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 135 :width normal :foundry "unknown" :family "Monospace"))))
 '(mozc-cand-posframe-focused-face ((t (:background "#393F60" :foreground "#C7C9D1"))))
 '(mozc-cand-posframe-footer-face ((t (:background "#1E2029" :foreground "#454D73"))))
 '(mozc-cand-posframe-normal-face ((t (:background "#1E2029" :foreground "#C7C9D1"))))
 '(show-paren-match ((t (:background "#44475a" :foreground "#f1fa8c"))))
 '(symbol-overlay-default-face ((t (:background "gray21" :underline t))))
 '(vhl/default-face ((t (:foreground "#FF3333" :background "#FFCDCD")))))
